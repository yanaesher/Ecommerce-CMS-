// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
   provider = "prisma-client-js"
}

datasource db {
   provider = "postgresql"
   url      = env("DATABASE_URL")
}

model User {
   id        String    @id @default(uuid())
   email     String    @unique
   password  String?
   name      String    @default("Not specified")
   picture   String    @default("/uploads/no-user-image.png")
   store     Store[]
   reviews   Review[]
   favorites Product[]
   orders    Order[]
   createAt  DateTime  @default(now()) @map("create_at")
   update    DateTime  @updatedAt @map("update_at")

   @@map("users")
}

model Store {
   id String @id @default(uuid())

   createdAt DateTime @default(now()) @map("created_at")
   updatedAt DateTime @updatedAt @map("updated_at")

   title       String
   description String?
   user        User?     @relation(fields: [userId], references: [id])
   userId      String?   @map("user_id")
   product     Product[]

   categories Category[]
   colors     Color[]
   reviews    Review[]
   orderItems OrderItem[]

   @@map("stores")
}

model Product {
   id String @id @default(uuid())

   createdAt DateTime @default(now()) @map("created_at")
   updatedAt DateTime @updatedAt @map("updated_at")

   title       String
   description String
   price       Int
   images      String[]

   reviews    Review[]
   orderItems OrderItem[]
   store      Store?      @relation(fields: [storeId], references: [id])
   storeId    String?     @map("store_id")
   category   Category?   @relation(fields: [categoryId], references: [id])
   categoryId String?     @map("category_id")
   color      Color?      @relation(fields: [colorId], references: [id])
   colorId    String?     @map("color_id")
   user       User?       @relation(fields: [userId], references: [id])
   userId     String?     @map("user_id")

   @@map("products")
}

model Category {
   id String @id @default(uuid())

   createdAt DateTime @default(now()) @map("created_at")
   updatedAt DateTime @updatedAt @map("updated_at")

   title       String
   description String

   products Product[]
   store    Store?    @relation(fields: [storeId], references: [id])
   storeId  String?   @map("store_id")

   @@map("categories")
}

model Color {
   id        String   @id @default(uuid())
   createdAt DateTime @default(now()) @map("created_at")
   updatedAt DateTime @updatedAt @map("updated_at")

   name  String
   value String

   products Product[]
   store    Store?    @relation(fields: [storeId], references: [id])
   storeId  String?   @map("store_id")

   @@map("colors")
}

model Review {
   id        String   @id @default(uuid())
   createdAt DateTime @default(now()) @map("created_at")
   updatedAt DateTime @updatedAt @map("updated_at")

   text      String
   rating    Int
   user      User?    @relation(fields: [userId], references: [id])
   userId    String?
   product   Product? @relation(fields: [productId], references: [id])
   productId String?  @map("product_id")
   store     Store?   @relation(fields: [storeId], references: [id])
   storeId   String?  @map("store_id")

   @@map("reviews")
}

model Order {
   id        String   @id @default(uuid())
   createdAt DateTime @default(now()) @map("created_at")
   updatedAt DateTime @updatedAt @map("updated_at")

   status EnumOrderStatus @default(PENDING)

   items  OrderItem[]
   total  Int
   user   User?       @relation(fields: [userId], references: [id])
   userId String?     @map("user_id")

   @@map("orders")
}

model OrderItem {
   id        String   @id @default(uuid())
   createdAt DateTime @default(now()) @map("created_at")
   updatedAt DateTime @updatedAt @map("updated_at")
   order     Order?   @relation(fields: [orderId], references: [id])
   orderId   String?  @map("order_id")
   quantity  Int
   price     Int
   product   Product? @relation(fields: [productId], references: [id])
   productId String?  @map("product_id")
   store     Store?   @relation(fields: [storeId], references: [id])
   storeId   String?  @map("store_id")

   @@map("order_items")
}

enum EnumOrderStatus {
   PENDING
   PAYED
}
